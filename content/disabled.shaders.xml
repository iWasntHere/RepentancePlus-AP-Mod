<shaders>
    <shader name = "TrackerPageShader">

        <parameters>
            <param name="Enabled" type="float"/>
        </parameters>

		<vertex><![CDATA[
			attribute vec3 Position;
			attribute vec4 Color;
			attribute vec2 TexCoord;
			attribute vec4 RenderData;
			attribute float Scale;
            attribute float Enabled;
			varying vec4 Color0;
			varying vec2 TexCoord0;
			varying vec4 RenderDataOut;
			varying float ScaleOut;
            varying float EnabledOut;
			uniform mat4 Transform;
			void main(void)
			{
				RenderDataOut = RenderData;
				ScaleOut = Scale;			// Passing data to fragment shader
                EnabledOut = Enabled;       // Pass enabled state
				Color0 = Color;
				TexCoord0 = TexCoord;
				gl_Position = Transform * vec4(Position.xyz, 1.0);
			}
		]]></vertex>

        <fragment><![CDATA[
            varying lowp vec4 Color0;
            varying mediump vec2 TexCoord0;
            varying lowp vec4 RenderDataOut;
            varying lowp float ScaleOut;
            varying lowp float EnabledOut;
            uniform sampler2D Texture0;

            // I stole all this code from an older project of mine :D

            float luminance(vec3 rgb)
            {
                return 0.299 * rgb.r + 0.7152 * rgb.g + 0.0722 * rgb.b;
            }

            void main(void)
            {
                vec4 color = Color0 * texture2D(Texture0, TexCoord0);

                vec3 palette[4];
                palette[0] = vec3(199, 178, 154);
                palette[1] = vec3(199, 178, 154);
                palette[2] = vec3(153, 134, 117);
                palette[3] = vec3(54, 47, 45);

                vec3 newColor = palette[floor(min(luminance(color.rgb), 0.99) * 4)] / 255;

                gl_FragColor = mix(color, vec4(newColor.r, newColor.g, newColor.b, color.a), EnabledOut);
            }

        ]]></fragment>

    </shader>
</shaders>